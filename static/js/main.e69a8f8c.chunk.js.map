{"version":3,"sources":["Cell.js","Board.js","index.js"],"names":["Cell","this","props","value","isRevealed","isMine","neighbour","isFlagged","className","ref","onClick","onContextMenu","cMenu","getValue","React","Component","Board","state","boardData","initBoardData","height","width","mines","gameWon","mineCount","data","mineArray","map","datarow","dataitem","push","dimension","Math","floor","random","i","j","x","y","isEmpty","plantMines","getNeighbours","console","log","randomx","randomy","minesPlanted","getRandomNumber","updatedData","mine","traverseBoard","el","setState","revealEmpty","win","revealBoard","alert","getHidden","length","getFlags","e","preventDefault","getMines","FlagArray","JSON","stringify","key","handleCellClick","_handleContextMenu","nextProps","renderBoard","Game","handleGameStart","difficulty","document","querySelector","id","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e69a8f8c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default class Cell extends React.Component {\r\n    getValue() {\r\n        if (!this.props.value.isRevealed){\r\n            return this.props.value.isFlagged ? \"ðŸš©\" : null;\r\n        }\r\n        if (this.props.value.isMine) {\r\n            return \"ðŸ’£\";\r\n        }\r\n        if(this.props.value.neighbour === 0 ){\r\n            return null;\r\n        }\r\n        return this.props.value.neighbour;\r\n    }\r\n    render() {\r\n        let className = \"cell\" + (this.props.value.isRevealed ? \"\" : \" hidden\") + (this.props.value.isMine ? \" is-mine\" : \"\") + (this.props.value.isFlagged ? \" is-flag\" : \"\");\r\n\r\n\r\n        return (\r\n            <div ref=\"cell\" onClick={this.props.onClick} className={className} onContextMenu={this.props.cMenu}>\r\n                {this.getValue()}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nexport default class Board extends React.Component {\r\n    state = {\r\n        boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\r\n        gameWon: false,\r\n        mineCount: this.props.mines,\r\n    };\r\n\r\n    /* Helper Functions */\r\n\r\n    // get mines\r\n    getMines(data) {\r\n        let mineArray = [];\r\n\r\n        data.map(datarow => {\r\n            datarow.map((dataitem) => {\r\n                if (dataitem.isMine) {\r\n                    mineArray.push(dataitem);\r\n                }\r\n            });\r\n        });\r\n\r\n        return mineArray;\r\n    }\r\n\r\n    // get Flags\r\n    getFlags(data) {\r\n        let mineArray = [];\r\n\r\n        data.map(datarow => {\r\n            datarow.map((dataitem) => {\r\n                if (dataitem.isFlagged) {\r\n                    mineArray.push(dataitem);\r\n                }\r\n            });\r\n        });\r\n\r\n        return mineArray;\r\n    }\r\n\r\n    // get Hidden cells\r\n    getHidden(data) {\r\n        let mineArray = [];\r\n\r\n        data.map(datarow => {\r\n            datarow.map((dataitem) => {\r\n                if (!dataitem.isRevealed) {\r\n                    mineArray.push(dataitem);\r\n                }\r\n            });\r\n        });\r\n\r\n        return mineArray;\r\n    }\r\n\r\n    // get random number given a dimension\r\n    getRandomNumber(dimension) {\r\n        // return Math.floor(Math.random() * dimension);\r\n        return Math.floor((Math.random() * 1000) + 1) % dimension;\r\n    }\r\n\r\n    // Gets initial board data\r\n    initBoardData(height, width, mines) {\r\n        let data = [];\r\n\r\n        for (let i = 0; i < height; i++) {\r\n            data.push([]);\r\n            for (let j = 0; j < width; j++) {\r\n                data[i][j] = {\r\n                    x: i,\r\n                    y: j,\r\n                    isMine: false,\r\n                    neighbour: 0,\r\n                    isRevealed: false,\r\n                    isEmpty: false,\r\n                    isFlagged: false,\r\n                };\r\n            }\r\n        }\r\n        data = this.plantMines(data, height, width, mines);\r\n        data = this.getNeighbours(data, height, width);\r\n        console.log(data);\r\n        return data;\r\n    }\r\n\r\n    // plant mines on the board\r\n    plantMines(data, height, width, mines) {\r\n        let randomx, randomy, minesPlanted = 0;\r\n\r\n        while (minesPlanted < mines) {\r\n            randomx = this.getRandomNumber(width);\r\n            randomy = this.getRandomNumber(height);\r\n            if (!(data[randomx][randomy].isMine)) {\r\n                data[randomx][randomy].isMine = true;\r\n                minesPlanted++;\r\n            }\r\n        }\r\n\r\n        return (data);\r\n    }\r\n\r\n    // get number of neighbouring mines for each board cell\r\n    getNeighbours(data, height, width) {\r\n        let updatedData = data, index = 0;\r\n\r\n        for (let i = 0; i < height; i++) {\r\n            for (let j = 0; j < width; j++) {\r\n                if (data[i][j].isMine !== true) {\r\n                    let mine = 0;\r\n                    const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\r\n                    area.map(value => {\r\n                        if (value.isMine) {\r\n                            mine++;\r\n                        }\r\n                    });\r\n                    if (mine === 0) {\r\n                        updatedData[i][j].isEmpty = true;\r\n                    }\r\n                    updatedData[i][j].neighbour = mine;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (updatedData);\r\n    };\r\n\r\n    // looks for neighbouring cells and returns them\r\n    traverseBoard(x, y, data) {\r\n        const el = [];\r\n\r\n        //up\r\n        if (x > 0) {\r\n            el.push(data[x - 1][y]);\r\n        }\r\n\r\n        //down\r\n        if (x < this.props.height - 1) {\r\n            el.push(data[x + 1][y]);\r\n        }\r\n\r\n        //left\r\n        if (y > 0) {\r\n            el.push(data[x][y - 1]);\r\n        }\r\n\r\n        //right\r\n        if (y < this.props.width - 1) {\r\n            el.push(data[x][y + 1]);\r\n        }\r\n\r\n        // top left\r\n        if (x > 0 && y > 0) {\r\n            el.push(data[x - 1][y - 1]);\r\n        }\r\n\r\n        // top right\r\n        if (x > 0 && y < this.props.width - 1) {\r\n            el.push(data[x - 1][y + 1]);\r\n        }\r\n\r\n        // bottom right\r\n        if (x < this.props.height - 1 && y < this.props.width - 1) {\r\n            el.push(data[x + 1][y + 1]);\r\n        }\r\n\r\n        // bottom left\r\n        if (x < this.props.height - 1 && y > 0) {\r\n            el.push(data[x + 1][y - 1]);\r\n        }\r\n\r\n        return el;\r\n    }\r\n\r\n    // reveals the whole board\r\n    revealBoard() {\r\n        let updatedData = this.state.boardData;\r\n        updatedData.map((datarow) => {\r\n            datarow.map((dataitem) => {\r\n                dataitem.isRevealed = true;\r\n            });\r\n        });\r\n        this.setState({\r\n            boardData: updatedData\r\n        })\r\n    }\r\n\r\n    /* reveal logic for empty cell */\r\n    revealEmpty(x, y, data) {\r\n        let area = this.traverseBoard(x, y, data);\r\n        area.map(value => {\r\n            if (!value.isRevealed && (value.isEmpty || !value.isMine)) {\r\n                data[value.x][value.y].isRevealed = true;\r\n                if (value.isEmpty) {\r\n                    this.revealEmpty(value.x, value.y, data);\r\n                }\r\n            }\r\n        });\r\n        return data;\r\n\r\n    }\r\n\r\n    // Handle User Events\r\n\r\n    handleCellClick(x, y) {\r\n        let win = false;\r\n\r\n        // check if revealed. return if true.\r\n        if (this.state.boardData[x][y].isRevealed) return null;\r\n\r\n        // check if mine. game over if true\r\n        if (this.state.boardData[x][y].isMine) {\r\n            this.revealBoard();\r\n            alert(\"game over\");\r\n        }\r\n\r\n        let updatedData = this.state.boardData;\r\n        updatedData[x][y].isFlagged = false;\r\n        updatedData[x][y].isRevealed = true;\r\n\r\n        if (updatedData[x][y].isEmpty) {\r\n            updatedData = this.revealEmpty(x, y, updatedData);\r\n        }\r\n\r\n        if (this.getHidden(updatedData).length === this.props.mines) {\r\n            win = true;\r\n            this.revealBoard();\r\n            alert(\"You Win\");\r\n        }\r\n\r\n        this.setState({\r\n            boardData: updatedData,\r\n            mineCount: this.props.mines - this.getFlags(updatedData).length,\r\n            gameWon: win,\r\n        });\r\n    }\r\n\r\n    _handleContextMenu(e, x, y) {\r\n        e.preventDefault();\r\n        let updatedData = this.state.boardData;\r\n        let mines = this.state.mineCount;\r\n        let win = false;\r\n\r\n        // check if already revealed\r\n        if (updatedData[x][y].isRevealed) return;\r\n\r\n        if (updatedData[x][y].isFlagged) {\r\n            updatedData[x][y].isFlagged = false;\r\n            mines++;\r\n        } else {\r\n            updatedData[x][y].isFlagged = true;\r\n            mines--;\r\n        }\r\n\r\n        if (mines === 0) {\r\n            const mineArray = this.getMines(updatedData);\r\n            const FlagArray = this.getFlags(updatedData);\r\n            win = (JSON.stringify(mineArray) === JSON.stringify(FlagArray));\r\n            if (win) {\r\n                this.revealBoard();\r\n                alert(\"You Win\");\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            boardData: updatedData,\r\n            mineCount: mines,\r\n            gameWon: win,\r\n        });\r\n    }\r\n\r\n    renderBoard(data) {\r\n        return data.map((datarow) => {\r\n            return datarow.map((dataitem) => {\r\n                return (\r\n                    <div key={dataitem.x * datarow.length + dataitem.y}>\r\n                        <Cell\r\n                            onClick={() => this.handleCellClick(dataitem.x, dataitem.y)}\r\n                            cMenu={(e) => this._handleContextMenu(e, dataitem.x, dataitem.y)}\r\n                            value={dataitem}\r\n                        />\r\n                        {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\r\n                    </div>);\r\n            })\r\n        });\r\n\r\n    }\r\n    // Component methods\r\n    componentWillReceiveProps(nextProps) {\r\n        if (JSON.stringify(this.props) !== JSON.stringify(nextProps)) {\r\n            this.setState({\r\n                boardData: this.initBoardData(nextProps.height, nextProps.width, nextProps.mines),\r\n                gameWon: false,\r\n                mineCount: nextProps.mines,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"board\">\r\n                <div className=\"game-info\">\r\n                    <span className=\"info\">mines: {this.state.mineCount}</span><br />\r\n                    <span className=\"info\">{this.state.gameWon ? \"You Win\" : \"\"}</span>\r\n                </div>\r\n                {\r\n                    this.renderBoard(this.state.boardData)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Board from './Board';\r\nimport './index.css';\r\n\r\nclass Game extends React.Component {\r\n\r\n    /*\r\n    Beginner: 10 mines, 8x8 board\r\n    Intermediate: 20 mines, 12x12 board\r\n    Expert: 40 mines, 16x16 board\r\n    */\r\n    state = {\r\n        height: 8,\r\n        width: 8,\r\n        mines: 10,\r\n    };\r\n\r\n    handleGameStart = () => {\r\n        let difficulty = document.querySelector(\"#level_select\");\r\n        if (difficulty.value === \"beginner\") {\r\n            this.setState({\r\n                height: 8,\r\n                width: 8,\r\n                mines: 10,\r\n            });\r\n        }\r\n        if (difficulty.value === \"intermediate\") {\r\n            this.setState({\r\n                height: 12,\r\n                width: 12,\r\n                mines: 20,\r\n            });\r\n        }\r\n        if (difficulty.value === \"expert\") {\r\n            this.setState({\r\n                height: 16,\r\n                width: 16,\r\n                mines: 40,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { height, width, mines } = this.state;\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-info\">\r\n                    <div className=\"instructions\">\r\n                        <h4>Rules</h4>\r\n                        <p>You are presented with a board of squares. Some squares contain mines (bombs), others don't. If you click on a square containing a bomb, you lose. If you manage to click all the squares (without clicking on any bombs) or flag all the mines, you win.</p>\r\n                        <p>Clicking a square which doesn't have a bomb reveals the number of neighbouring squares containing bombs. Use this information plus some guess work to avoid the bombs.</p>\r\n                        <p>To open a square, point at the square and click on it. To mark a square you think is a bomb, point and right-click.</p>\r\n                    </div>\r\n                    <h4>Select a level a click \"start\"</h4>\r\n                    <span className=\"info\">Level:\r\n                        <select id=\"level_select\">\r\n                            <option value=\"beginner\"> Beginner </option>\r\n                            <option value=\"intermediate\"> Intermediate </option>\r\n                            <option value=\"expert\"> Expert </option>\r\n                        </select>\r\n                    </span>\r\n                    <button onClick={this.handleGameStart}>Start</button>\r\n                </div>\r\n\r\n                <Board height={height} width={width} mines={mines} />\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));"],"sourceRoot":""}